events {}

http {
  # (ถ้าใช้ docker compose) ใช้ชื่อ service "web" จะชัวร์กว่า container name
  upstream django {
    server web:8003;  # เดิม myproject:8003
    # keepalive 16;
  }

  # ---------------- HTTP → (พร้อมอัปเป็น HTTPS ภายหลัง) ----------------
  server {
    listen 80;
    server_name _;

    # ถ้าเปิด HTTPS ในอนาคต สามารถ redirect ทั้งหมดไป 443 ได้:
    # return 301 https://$host$request_uri;

    # ---- Static files (เสิร์ฟจาก volume เดียวกับที่ collectstatic ใส่) ----
    location /static/ {
      alias /app/staticfiles/;
      access_log off;
      expires 30d;
      add_header Cache-Control "public, max-age=2592000, immutable";
      # ปิด directory listing เผื่อไว้
      autoindex off;
    }

    # ---- Proxy ไป Django ----
    location / {
      proxy_pass http://django;
      proxy_http_version 1.1;
      proxy_set_header Host $host;                 # สำคัญสำหรับ django-tenants
      proxy_set_header X-Forwarded-Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;  # ช่วย Django รู้ว่า http/https

      client_max_body_size 20m;
      proxy_read_timeout 60s;
      proxy_send_timeout 60s;
      proxy_connect_timeout 60s;

      # ถ้ามี ASGI/WebSocket ค่อยเปิดสองบรรทัดนี้
      # proxy_set_header Upgrade $http_upgrade;
      # proxy_set_header Connection "upgrade";
    }

    # ---- Security headers เบื้องต้น ----
    add_header X-Frame-Options SAMEORIGIN always;
    add_header X-Content-Type-Options nosniff always;
    add_header Referrer-Policy strict-origin-when-cross-origin always;

    # ---- Gzip ----
    gzip on;
    gzip_types text/plain text/css application/json application/javascript application/xml image/svg+xml;
    gzip_min_length 1024;
  }
}
