from rest_framework.viewsets import ViewSet
from rest_framework.response import Response
from rest_framework import status
from rental.functions.rental import RentalService

from drf_yasg.utils import swagger_auto_schema
from drf_yasg import openapi


class RentalViewSet(ViewSet):
    @swagger_auto_schema(
        operation_summary="‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î",
        operation_description="‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á tenant ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô",
        responses={
            200: openapi.Response(
                description="List of rentals",
                examples={
                    "application/json": [
                        {
                            "id": 1,
                            "user_id": 2,
                            "book_id": 5,
                            "rented_at": "2025-07-30T10:00:00Z",
                            "returned_at": None
                        }
                    ]
                }
            )
        }
    )
    def list(self, request):
        rentals = RentalService.get_all_rentals()
        print("üì¶ Rentals returned to client:", rentals)
        return Response(rentals, status=status.HTTP_200_OK)

    @swagger_auto_schema(
        operation_summary="‡πÄ‡∏ä‡πà‡∏≤‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠",
        operation_description="‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏ä‡πà‡∏≤‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ 1 ‡πÄ‡∏•‡πà‡∏° ‡∏´‡∏≤‡∏Å‡πÄ‡∏•‡πà‡∏°‡∏ô‡∏±‡πâ‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏ä‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà",
        request_body=openapi.Schema(
            type=openapi.TYPE_OBJECT,
            required=["user_id", "book_id"],
            properties={
                "user_id": openapi.Schema(
                    type=openapi.TYPE_INTEGER, description="ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"
                ),
                "book_id": openapi.Schema(
                    type=openapi.TYPE_INTEGER, description="ID ‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠"
                ),
            },
            example={"user_id": 1, "book_id": 5}
        ),
        responses={
            201: openapi.Response(
                description="‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πà‡∏≤‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
                examples={
                    "application/json": {
                        "id": 12,
                        "user_id": 1,
                        "book_id": 5,
                        "rented_at": "2025-07-30T12:00:00Z"
                    }
                }
            ),
            400: openapi.Response(
                description="‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ñ‡∏π‡∏Å‡πÄ‡∏ä‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
                examples={"application/json": {"error": "Book already rented"}}
            )
        }
    )
    def create(self, request):
        user_id = request.data.get("user_id")
        book_id = request.data.get("book_id")
        result = RentalService.rent_book(user_id, book_id)

        if "error" in result:
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        return Response(result, status=status.HTTP_201_CREATED)

    @swagger_auto_schema(
        operation_summary="‡∏Ñ‡∏∑‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠",
        operation_description="‡∏Ñ‡∏∑‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡πà‡∏≤‡πÑ‡∏ß‡πâ ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ rental_id ‡πÉ‡∏ô URL",
        responses={
            200: openapi.Response(
                description="‡∏Ñ‡∏∑‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
                examples={
                    "application/json": {
                        "status": "returned",
                        "returned_at": "2025-07-30T14:30:00Z"
                    }
                }
            ),
            400: openapi.Response(
                description="‡πÑ‡∏°‡πà‡∏û‡∏ö rental ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß",
                examples={"application/json": {"error": "Rental not found or already returned"}}
            )
        }
    )
    def update(self, request, pk=None):
        result = RentalService.return_book(pk)
        if "error" in result:
            return Response(result, status=status.HTTP_400_BAD_REQUEST)
        return Response(result)
